import logging
import time
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types.message import ContentType
from aiogram.types import ChatActions

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from aiogram.contrib.fsm_storage.memory import MemoryStorage

import openai

import bot.markups as nav
from bot.cfg import *
from bot.db import Database

import datetime

# Set up the bot and OpenAI API credentials 
bot_token = TELEGRAM_BOT_TOKEN
api_key = OPENAI_API_KEY

log = "data/log"
logging.basicConfig(filename=log, filemode='a', level=logging.INFO)

#logging.basicConfig(level=logging.INFO)

storage = MemoryStorage()

bot = Bot(token=bot_token)
dp = Dispatcher(bot, storage=storage)
db = Database(DATABASE)

MAX_TOKEN = 0

openai.api_key = api_key

def days_to_seconds(days):
     return days * 24 * 60 *  60

def time_sub_day(get_time):
     time_now = int(time.time())
     middle_time = int(get_time) - time_now

     if middle_time <= 0:
          return False
     else:
          dt = str(datetime.timedelta(seconds=middle_time))
          dt = dt.replace("days", "–¥–Ω–µ–π")
          dt = dt.replace("day", "–¥–µ–Ω—å")
     return dt



messages = {}



@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
     try:
          await dp.bot.set_my_commands([
          types.BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
          types.BotCommand("help", "–ü–æ–º–æ—â—å"),
          types.BotCommand("newtopic", "–°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥"),
          # types.BotCommand("add_personal", "–î–æ–±–∞–≤—Ç–µ –≤–∞—à–µ–º—É –±–æ—Ç—É –ø–µ—Ä—Å–æ–Ω—É. –î–æ 150 —Å–∏–º–≤–æ–ª–æ–≤"),
          # types.BotCommand("–°–±—Ä–æ—Å–∏—Ç—å_–ø–µ—Ä—Å–æ–Ω—É", "–°–±—Ä–æ—Å–∏—Ç—å –ø–µ—Ä—Å–æ–Ω—É"),
          ]) 
          

          if(not db.user_exists(message.from_user.id)): # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ  –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ —Ç–æ –æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è
               db.add_user(message.from_user.id) # –∫–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É (–î–æ–±–∞–≤–ª—è–µ—Ç user_id)
               db.set_nickname(message.from_user.id, message.from_user.username) # –î–æ–±–∞–≤–ª—è–µ—Ç username login
               db.set_personalities(message.from_user.id, "–í—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å")
               await bot.send_message(message.from_user.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø - –≤–∞—à –±–æ—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ ChatGPT. ü§ñ–Ø –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º —Ä–∞–∑–ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –ø–æ–º–æ—á—å —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏ –∏ –¥–µ–ª–∞—Ç—å –∂–∏–∑–Ω—å –ø—Ä–æ—â–µ. –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –º–Ω–µ –ø–µ—Ä—Å–æ–Ω—É –∏ —è –±—É–¥—É –¥–∞–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –≤ —Ä–∞–º–∫–∞—Ö —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞üí°. –ë—É–¥–µ—Ç –ø–æ—á–µ—Ç–æ–º –º–Ω–µ –ø–æ–º–æ—á—å –≤–∞–º! üëç", reply_markup=nav.freeMenu)
               await bot.send_message(message.from_user.id, "–£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! –ú—ã —Ä–∞–¥—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –í–∞–º –Ω–∞—à—É –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é —Å–µ—Ä–≤–∏—Å–∞, –≥–¥–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç—ã –¥–æ 150 —Å–∏–º–≤–æ–ª–æ–≤, –∞ —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∞—Ç—å –æ—Ç–≤–µ—Ç—ã —Å–æ —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—â–µ–π 1500 —Ç–æ–∫–µ–Ω–æ–≤. üòä –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª—å—à–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –µ–∂–µ–º–µ—Å—è—á–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª–∏—Ç –í–∞–º –≤ –ø–æ–ª–Ω–æ–π –º–µ—Ä–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞. üí° –°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à –≤—ã–±–æ—Ä! üëç", reply_markup=nav.freeMenu)
          else:
               
               await bot.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—éü§ñ\r\n\r\n–ú—ã —Ä–∞–¥—ã —Å–æ–æ–±—â–∏—Ç—å, —á—Ç–æ –í–∞—à ü§ñ –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.", reply_markup=nav.freeMenu)
               username = message.from_user.username
               messages[username] = []
     except Exception as e:
          logging.error(f'Error in start_cmd: {e}')

@dp.message_handler(commands=['help'])
async def help_cmd(message: types.Message) -> None:
          await bot.send_message(message.from_user.id, HELP_DESCRIPTION)




@dp.message_handler(commands=['newtopic'])
async def new_topic_cmd(message: types.Message):
    try:
        userid = message.from_user.id
        messages[str(userid)] = []
        await message.reply('Starting a new topic! * * * \n\n–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Ç–µ–º—É! * * *', parse_mode='Markdown')
    except Exception as e:
        logging.error(f'Error in new_topic_cmd: {e}')


@dp.message_handler(commands=['–°–±—Ä–æ—Å–∏—Ç—å_–ø–µ—Ä—Å–æ–Ω—É'])
async def new_topic_cmd(message: types.Message):
    try:
        db.set_personalities(message.from_user.id, "–í—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å")
        await message.reply('–ü–µ—Ä—Å–æ–Ω–∞ —Å–±—Ä–æ—à–µ–Ω–∞', parse_mode='Markdown',reply_markup=nav.premiumMenu)
    except Exception as e:
        logging.error(f'Error in new_topic_cmd: {e}')

# =========================== add persona
class FSMstates(StatesGroup):
     personalities = State()

@dp.message_handler(commands=['–î–æ–±–∞–≤–∏—Ç—å_–ø–µ—Ä—Å–æ–Ω—É'], state=None)
async def add_persona(message: types.Message):
     if db.get_sub_status(message.from_user.id) == False: # —Ç–æ–µ—Å—Ç—å —Å—Ç–∞—Ç—É—Å free 
          await bot.send_message(message.from_user.id,"–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. \r\n–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–∏—Å–≤–æ–∏—Ç—å –í–∞—à–µ–º—É –±–æ—Ç—É-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É —Ä–æ–ª—å –ø–∏—Ä–∞—Ç–∞, –∫–æ—Å–º–æ–¥–µ—Å–∞–Ω—Ç–Ω–∏–∫–∞ –∏–ª–∏ —é—Ä–∏—Å—Ç–∞, –≤—Å–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç—Å—è –≤ –≤–∞—à—É —Ñ–∞–Ω—Ç–∞–∑–∏—é –∏ 150 —Å–∏–º–≤–æ–ª–æ–≤ –≤–≤–æ–¥–∏–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–µ—Ä—Å–æ–Ω—ã.", reply_markup=nav.freeMenu)
          return
     else:
          await FSMstates.personalities.set()
          await message.reply("–î–æ–±–∞–≤—Ç–µ –≤–∞—à–µ–º—É –±–æ—Ç—É –ø–µ—Ä—Å–æ–Ω—É. –î–æ 150 —Å–∏–º–≤–æ–ª–æ–≤")

@dp.message_handler(state=FSMstates.personalities)
async def process_name(message: types.Message, state: FSMContext):
     
     if len(message.text) >= 150: 
          await bot.send_message(
          chat_id=message.from_user.id,
          text=f'"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –í—ã –≤–≤–µ–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤ (–±–æ–ª–µ–µ 150)."',
          )
          return
     
     async with state.proxy() as data:
          data['personalities'] = message.text

          db.set_personalities(message.chat.id, message.text)

          await message.reply("–ü–µ—Ä—Å–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞",
          parse_mode='Markdown',
          reply_markup=nav.premiumMenu)
     await state.finish()

# =========================== end


@dp.message_handler()
async def echo_msg(message: types.Message):
     
     try:
          user_message = message.text
          userid = message.from_user.username

          if message.chat.type == 'private': # –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è —á–∞—Ç –≤ –ª–∏—á–Ω—ã–º –∞ –Ω–µ –ø—É–±–ª–∏—á–Ω—ã–º (–Ω–∞–ø—Ä–∏–º–µ—Ä –æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç)
               user_sub = time_sub_day(db.get_time_sub(message.from_user.id))

          # –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤–≤–æ–¥–∏–º–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é —Ç–∞–π–º–µ—Ä–∞ –æ–Ω –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
          if db.get_sub_status(message.from_user.id) == True:  
               db.set_signup(message.from_user.id, "sub")
          elif db.get_sub_status(message.from_user.id) == False:
               db.set_signup(message.from_user.id, "free")
               db.set_time_sub(message.from_user.id, 0)
               db.set_personalities(message.from_user.id, "–í—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å")

          if message.text == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏':
               await bot.send_chat_action(message.chat.id, ChatActions.TYPING)
               await bot.send_message(message.from_user.id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏",reply_markup=nav.settingMenu)
               return

          if message.text == '–ü–µ—Ä—Å–æ–Ω–∞':
               await bot.send_chat_action(message.chat.id, ChatActions.TYPING)
               if db.get_sub_status(message.from_user.id) == False:
                    await bot.send_message(message.from_user.id, "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. \r\n–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–∏—Å–≤–æ–∏—Ç—å –í–∞—à–µ–º—É –±–æ—Ç—É-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É —Ä–æ–ª—å –ø–∏—Ä–∞—Ç–∞, –∫–æ—Å–º–æ–¥–µ—Å–∞–Ω—Ç–Ω–∏–∫–∞ –∏–ª–∏ —é—Ä–∏—Å—Ç–∞, –≤—Å–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç—Å—è –≤ –≤–∞—à—É —Ñ–∞–Ω—Ç–∞–∑–∏—é –∏ 150 —Å–∏–º–≤–æ–ª–æ–≤ –≤–≤–æ–¥–∏–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–µ—Ä—Å–æ–Ω—ã.", reply_markup=nav.freeMenu)
               else:
                    await bot.send_message(message.from_user.id, "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é \"–ü–µ—Ä—Å–æ–Ω–∞\" –¥–ª—è –∑–∞–¥–∞–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏, —Ä–æ–ª–∏ –∏–ª–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –≤–∞—à–µ–º—É –±–æ—Ç—É-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É. –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –Ω–∞–¥–µ–ª–∏—Ç—å –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –±–æ–ª–µ–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º —Å—Ç–∏–ª–µ–º –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º, —á—Ç–æ –ø–æ–º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.", reply_markup=nav.PersonalitiesMenu)
               return

          if message.text == '–ü—Ä–æ—Ñ–∏–ª—å': # —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Ñ–∏–ª—å

               await bot.send_chat_action(message.chat.id, ChatActions.TYPING)
               user_nickname = "–í–∞—à –Ω–∏–∫: " + db.get_nickname(message.from_user.id)
               
               if user_sub == False:
                    user_sub = "Free"
               user_sub = "\n–ü–æ–¥–ø–∏—Å–∫–∞: " + user_sub

               await bot.send_message(message.from_user.id, user_nickname + user_sub)
               PERSONALITIES = db.get_personalities(message.from_user.id)
               
               
               if db.get_sub_status(message.from_user.id) == True:
                    await bot.send_message(message.from_user.id, "–ü–µ—Ä—Å–æ–Ω–∞ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞:\n\n\""+PERSONALITIES+"\"",reply_markup=nav.premiumMenu)
               else:
                    await bot.send_message(message.from_user.id, "–ü–µ—Ä—Å–æ–Ω–∞ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞:\n\n\""+PERSONALITIES+"\"",reply_markup=nav.freeMenu)
               return

          elif message.text == '–ü–æ–¥–ø–∏—Å–∫–∞':# —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–æ–º–∞–Ω–¥—É –ø–æ–¥–ø–∏—Å–∫–∞
               if db.get_signup(message.from_user.id) == "sub":
                    await bot.send_message(message.from_user.id, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å üåü –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞", reply_markup=nav.premiumMenu)
                    logging.info(f'{userid}: {user_message}')
                    return
               else:
                    await bot.send_message(message.from_user.id, description, reply_markup=nav.sub_inline_markup)
                    logging.info(f'{userid}: {user_message}')
                    return

          else: # –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã 
               await bot.send_chat_action(message.chat.id, ChatActions.TYPING)
               if db.get_signup(message.from_user.id) == "sub": # –∑–¥–µ—Å—å –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ
                    #await bot.send_message(message.from_user.id, "–ß—Ç–æ? 110", reply_markup=nav.premiumMenu) # –µ—Å–ª–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —Å—Ç–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –±–∞–∑–µ —Ç–æ –≤—ã–¥–∞—ë—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ 
                    MAX_TOKEN = MAX_TOKEN_SUB
                    logging.info(f'{userid}: {user_message}')
                    
               else: # –∑–¥–µ—Å—å –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
                    MAX_TOKEN = MAX_TOKEN_FREE
                    if len(message.text) >= 150: 
                         await bot.send_message(
                         chat_id=message.from_user.id,
                         text=f'"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –í—ã –≤–≤–µ–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤ (–±–æ–ª–µ–µ 150). –°–ª–µ–¥—É—é—â–µ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –º–æ–∂–Ω–æ —Å–Ω—è—Ç—å, –∏—Å–ø–æ–ª—å–∑—É—è –ø–æ–¥–ø–∏—Å–∫—É. \r\n\r\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—à —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤. üîç"',
                         reply_markup = nav.sub_inline_markup
                         )
                         logging.info(f'{userid}: {user_message}')
                         return

     # Add the user's message to their message history

          PERSONALITIES = db.get_personalities(message.from_user.id)
          if userid not in messages:
               messages[userid] = []
          messages[userid].append({"role": "user", "content": user_message})
          messages[userid].append({"role": "system", "content": PERSONALITIES})
          messages[userid].append({"role": "user",
                                 "content": f"chat: {message.chat} –°–µ–π—á–∞—Å {time.strftime('%d/%m/%Y %H:%M:%S')} user: {message.from_user.first_name} message: {message.text}"})
          

        # Check if the message is a reply to the bot's message or a new message
          should_respond = not message.reply_to_message or message.reply_to_message.from_user.id == bot.id

          if should_respond:
            # –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "–æ–±—Ä–∞–±–æ—Ç–∫–∞", —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å, —á—Ç–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
               processing_message = await message.reply(
               'I need to think ü§î \n(If the bot does not respond, write /newtopic) * * * \n\n–ú–Ω–µ –Ω—É–∂–Ω–æ –ø–æ–¥—É–º–∞—Ç—å ü§î \n(–ï—Å–ª–∏ –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ /newtopic) * * *',
               parse_mode='Markdown')

               # Send a "typing" action to indicate that the bot is typing a response
               await bot.send_chat_action(chat_id=message.chat.id, action="typing")

               # Generate a response using OpenAI's Chat API
               completion = await openai.ChatCompletion.acreate(
                    model="gpt-3.5-turbo",
                    messages=messages[userid],
                    max_tokens=MAX_TOKEN,
                    temperature=1,
                    frequency_penalty=0,
                    presence_penalty=0,
                    user=userid
               )
               chatgpt_response = completion.choices[0]['message']

               #await bot.send_message(message.from_user.id, "–≠—Ç–æ 175 —Å—Ç—Ä–æ–∫–∞")

               await bot.send_chat_action(message.chat.id, ChatActions.TYPING)
               # Add the bot's response to the user's message history
               messages[userid].append({"role": "assistant", "content": chatgpt_response['content']})
               logging.info(f'ChatGPT response: {chatgpt_response["content"]}')
               #await bot.send_message(message.from_user.id, "–≠—Ç–æ 179 —Å—Ç—Ä–æ–∫–∞")
               await bot.send_chat_action(message.chat.id, ChatActions.TYPING)
               # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

               # Delete the "processing" message
               await bot.delete_message(chat_id=processing_message.chat.id, message_id=processing_message.message_id)

               if (ALIVE_TEXT == False):
                    await message.reply(chatgpt_response['content'])
               #await bot.send_message(message.from_user.id, "–≠—Ç–æ 184 —Å—Ç—Ä–æ–∫–∞")
               else:
                    random_number = 20                   #random.randint(5, 25)
                    text = chatgpt_response['content']
                    msg = await bot.send_message(message.chat.id, '_')
                    tbp = text[:random_number]
                    for x in range(0, len(text), random_number):
                         await bot.edit_message_text(chat_id=message.chat.id, message_id=msg.message_id, text=f'{tbp}_')
                         #random_number = random.randint(5, 25)
                         tbp = text[0:x+random_number]
                         time.sleep(RESPONSE_TIME)
                         await bot.edit_message_text(chat_id=message.chat.id, message_id=msg.message_id, text=tbp)
               await bot.edit_message_text(chat_id=message.chat.id, message_id=msg.message_id, text=text)
                    



     except Exception as ex:
        # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Ç–µ–º—É
          if ex == "context_length_exceeded":
            await message.reply(
                'The bot ran out of memory, re-creating the dialogue * * * \n\n–£ –±–æ—Ç–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ø–∞–º—è—Ç—å, –ø–µ—Ä–µ—Å–æ–∑–¥–∞—é –¥–∏–∞–ª–æ–≥ * * *',
                parse_mode='Markdown')
            await new_topic_cmd(message)
            await echo_msg(message)



@dp.callback_query_handler(text="submonth") # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫—Ç–æ—Ä—ã–π –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
async def submonth(call: types.CallbackQuery):
     await bot.delete_message(call.from_user.id, call.message.message_id)
     await bot.send_invoice(chat_id=call.from_user.id, title="–ü–æ–¥–ø–∏—Å–∫–∞ ‚öúÔ∏è", description=description, payload="month_sub", provider_token=YOOTOKEN, currency="RUB", start_parameter="test", prices=[{"label": "–†—É–±", "amount": 15000}])

@dp.pre_checkout_query_handler() #–ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ —Ç–æ–≤–∞—Ä –µ—Å—Ç—å –Ω–∞ —Å–∫–ª–∞–¥–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–∫
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
     await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

@dp.message_handler(content_types = ContentType.SUCCESSFUL_PAYMENT) #–ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ –≤—Å–ª—É—á–∞–µ –µ—Å–ª–∏ –≤—Å—ë —Ö–æ—Ä–æ—à–æ —Ç–æ –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á—Ç–æ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ –∏ –ø—Ä–∏—Å–≤–∞–µ–≤–∞–µ—Ç –µ–º—É –≤—Ä–µ–º—è –∏ —Å—Ç–∞—Ç—É—Å
async def process_pay(message: types.Message):
     if message.successful_payment.invoice_payload == "month_sub":
            time_sub = int(time.time()) + days_to_seconds(30)
            db.set_time_sub(message.from_user.id, time_sub)
            db.set_signup(message.from_user.id, "sub")
            await bot.send_message(message.from_user.id, "–í–∞–º –≤—ã–¥–∞–Ω–∞ ‚öúÔ∏è –ø–æ–¥–ø–∏—Å–∫–∞", reply_markup=nav.premiumMenu)


if __name__ == '__main__':
    executor.start_polling(dp)
